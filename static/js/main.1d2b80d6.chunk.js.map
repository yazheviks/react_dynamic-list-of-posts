{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/CommentsList/CommentsList.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUserPosts","userId","posts","filter","post","getPostDetails","postId","postDetails","Loader","className","PostsList","selectedUserId","choosePost","selectedPostId","useState","setPosts","isLoading","toggleLoading","error","setError","useEffect","loadPosts","postsFromServer","map","key","id","title","type","onClick","getPostComments","comments","comment","postComment","name","email","body","method","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","handleSubmit","event","preventDefault","includes","onSubmit","placeholder","value","onChange","target","CommentsList","handleDelete","PostDetails","setPostDetails","setComments","isCommentsShown","toggleCommentsVisibility","loadPostDetails","postDetailsFromServer","commentsFromserver","length","classNames","button","getUsers","users","UserSelect","handleUserSelect","setUsers","loadUsers","usersFromServer","user","index","App","setSelectedUserId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"8XAEaA,EAAO,uCAAG,WAAMC,EAAKC,GAAX,iBAAAC,EAAA,sEACEC,MAAM,GAAD,OAHN,kCAGM,OAAeH,GAAOC,GAD7B,WACfG,EADe,QAGPC,GAHO,sBAIb,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAJ9B,uBAOAJ,EAASK,OAPT,cAOfC,EAPe,yBASdA,EAAOC,MATO,2CAAH,wDCAPC,EAAY,uCAAG,WAAMC,GAAN,eAAAX,EAAA,sEACNH,EAAQ,UADF,cACpBe,EADoB,yBAIxBD,EACIC,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKH,SAAWA,KACrCC,GANoB,2CAAH,sDAUZG,EAAc,uCAAG,WAAMC,GAAN,eAAAhB,EAAA,sEACFH,EAAQ,UAAD,OAAWmB,IADhB,cACtBC,EADsB,yBAGrBA,GAHqB,2CAAH,sDCTdC,G,MAAS,kBACpB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,uBCCNC,G,MAAY,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,eAAgBC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,eAAqB,EACjDC,mBAAS,IADwC,mBACpEZ,EADoE,KAC7Da,EAD6D,OAExCD,oBAAS,GAF+B,mBAEpEE,EAFoE,KAEzDC,EAFyD,OAGjDH,mBAAS,MAHwC,mBAGpEI,EAHoE,KAG7DC,EAH6D,KAK3EC,qBAAU,WACR,IACEC,IACA,SACAF,EAAS,8BAEV,CAACR,IAEJ,IAAMU,EAAS,uCAAG,4BAAA/B,EAAA,sEACcU,EAAaW,GAD3B,OACVW,EADU,OAGhBP,EAASO,GACTL,GAAc,GAJE,2CAAH,qDAOf,OACE,yBAAKR,UAAU,aACb,sCAECO,EACG,kBAAC,EAAD,QACEd,GACF,4BACGA,EAAMqB,KAAI,SAAAnB,GAAI,OACb,wBAAIK,UAAU,kBAAkBe,IAAKpB,EAAKqB,IACxC,6BACE,4CACarB,EAAKH,OADlB,OAGCG,EAAKsB,OAER,4BACEC,KAAK,SACLlB,UAAU,2BACVmB,QAAS,kBAAMhB,EAAWR,EAAKqB,MAE9BZ,IAAmBT,EAAKqB,GACrB,QACA,eAQbP,GACD,6BAAMA,M,gBCxDDW,EAAe,uCAAG,WAAMvB,GAAN,eAAAhB,EAAA,sEACNH,EAAQ,aADF,cACvB2C,EADuB,yBAGtBA,EAAS3B,QAAO,SAAA4B,GAAO,OAAIA,EAAQzB,SAAWA,MAHxB,2CAAH,sDAMf0B,EAAW,uCAAG,WACzB1B,EACA2B,EACAC,EACAC,GAJyB,SAAA7C,EAAA,gFJMDS,EIDH,CACrBO,SACA2B,OACAC,QACAC,QJHiChD,EIDzB,YJGR,CACEiD,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAElBF,KAAMG,KAAKC,UAAUxC,OIbE,iCJMP,IAAMA,IINC,OAAH,4DAYXyC,EAAgB,SAAAC,GAAS,OJKhBrD,EIL2B,aAAD,OAAcqD,GJKjCtD,EAC3BC,EACA,CACEgD,OAAQ,WAHU,IAAAhD,GKpBTsD,G,MAAiB,SAAC,GAAgC,IAA9BpC,EAA6B,EAA7BA,OAAQqC,EAAqB,EAArBA,eAAqB,EACpC7B,mBAAS,IAD2B,mBACrDmB,EADqD,KAC/CW,EAD+C,OAElC9B,mBAAS,IAFyB,mBAErDoB,EAFqD,KAE9CW,EAF8C,OAGpC/B,mBAAS,IAH2B,mBAGrDqB,EAHqD,KAG/CW,EAH+C,OAIlChC,mBAAS,MAJyB,mBAIrDI,EAJqD,KAI9CC,EAJ8C,KAMtD4B,EAAY,uCAAG,WAAMC,GAAN,SAAA1D,EAAA,yDACnB0D,EAAMC,iBAEDhB,GAASC,EAAMgB,SAAS,MAASf,EAHnB,0EAQXH,EAAY1B,EAAQ2B,EAAMC,EAAOC,GARtB,OASjBQ,IACAC,EAAQ,IACRC,EAAS,IACTC,EAAQ,IAZS,kDAcjB3B,EAAS,2BAdQ,0DAAH,sDAkBlB,OAAOD,EACL,6BAAMA,GAEN,0BAAMT,UAAU,iBAAiB0C,SAAUJ,GACzC,yBAAKtC,UAAU,cACb,2BACEkB,KAAK,OACLM,KAAK,OACLmB,YAAY,YACZ3C,UAAU,wBACV4C,MAAOpB,EACPqB,SAAU,SAAAN,GAAK,OAAIJ,EAAQI,EAAMO,OAAOF,WAI5C,yBAAK5C,UAAU,cACb,2BACEkB,KAAK,OACLM,KAAK,QACLmB,YAAY,aACZ3C,UAAU,wBACV4C,MAAOnB,EACPoB,SAAU,SAAAN,GAAK,OAAIH,EAASG,EAAMO,OAAOF,WAI7C,yBAAK5C,UAAU,cACb,8BACEwB,KAAK,OACLmB,YAAY,oBACZ3C,UAAU,wBACV4C,MAAOlB,EACPmB,SAAU,SAAAN,GAAK,OAAIF,EAAQE,EAAMO,OAAOF,WAI5C,4BACE1B,KAAK,SACLlB,UAAU,wCAFZ,oBC7DO+C,G,MAAe,SAAC,GAAkC,IAAhC1B,EAA+B,EAA/BA,SAAUa,EAAqB,EAArBA,eAAqB,EAClC7B,mBAAS,MADyB,mBACrDI,EADqD,KAC9CC,EAD8C,KAGtDsC,EAAY,uCAAG,WAAMhB,GAAN,SAAAnD,EAAA,+EAEXkD,EAAcC,GAFH,OAGjBE,IAHiB,+CAKjBxB,EAAS,0BALQ,wDAAH,sDASlB,OAAOD,EACL,6BAAMA,GAEN,wBAAIT,UAAU,qBACXqB,EAASP,KAAI,SAAAQ,GAAO,OACnB,wBAAItB,UAAU,yBAAyBe,IAAKO,EAAQN,IAClD,4BACEE,KAAK,SACLlB,UAAU,oCACVmB,QAAS,kBAAM6B,EAAa1B,EAAQN,MAHtC,KAOA,2BACGM,EAAQI,aCrBRuB,EAAc,SAAC,GAAgB,IAAdpD,EAAa,EAAbA,OAAa,EACHQ,mBAAS,IADN,mBAClCP,EADkC,KACrBoD,EADqB,OAET7C,mBAAS,MAFA,mBAElCgB,EAFkC,KAExB8B,EAFwB,OAGW9C,oBAAS,GAHpB,mBAGlC+C,EAHkC,KAGjBC,EAHiB,OAIfhD,mBAAS,MAJM,mBAIlCI,EAJkC,KAI3BC,EAJ2B,KAMzCC,qBAAU,WACR2C,IACApB,MACC,CAACrC,IAEJ,IAAMyD,EAAe,uCAAG,4BAAAzE,EAAA,+EAEgBe,EAAeC,GAF/B,OAEd0D,EAFc,OAIpBL,EAAeK,GAJK,gDAMpB7C,EAAS,2BANW,yDAAH,qDAUfwB,EAAc,uCAAG,4BAAArD,EAAA,+EAEcuC,EAAgBvB,GAF9B,OAEb2D,EAFa,OAInBL,EAAYK,GAJO,gDAMnB9C,EAAS,2BANU,yDAAH,qDAUpB,OAAOD,EACL,6BAAMA,GAEN,yBAAKT,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BACGF,EAAY4B,OAIjB,6BAAS1B,UAAU,yBAChBqB,EAEG,sCACKA,EAASoC,QACV,4BACEvC,KAAK,SACLlB,UAAW0D,IAAW,CACpBC,QAAQ,IAEVxC,QAAS,kBAAMkC,GAA0BD,KAL3C,UAOMA,EACA,OACA,OATN,YASgB/B,EAASoC,OATzB,cAaDL,GACC,kBAAC,EAAD,CACE/B,SAAUA,EACVa,eAAgBA,KAKrB,mDAIP,iCACE,yBAAKlC,UAAU,6BACb,kBAAC,EAAD,CAAgBH,OAAQA,EAAQqC,eAAgBA,QClF7C0B,EAAQ,uCAAG,WAAMpE,GAAN,eAAAX,EAAA,sEACFH,EAAQ,UADN,cAChBmF,EADgB,yBAGfA,GAHe,2CAAH,sDCERC,EAAa,SAAC,GAA0C,IAAxC5D,EAAuC,EAAvCA,eAAgB6D,EAAuB,EAAvBA,iBAAuB,EACxC1D,mBAAS,IAD+B,mBAC3DwD,EAD2D,KACpDG,EADoD,KAGlErD,qBAAU,WACRsD,MACC,IAEH,IAAMA,EAAS,uCAAG,4BAAApF,EAAA,sEACc+E,IADd,OACVM,EADU,OAGhBF,EAASE,GAHO,2CAAH,qDAMf,OACE,qDAGE,4BACElE,UAAU,qBACV4C,MAAO1C,EACP2C,SAAUkB,GAEV,4BAAQnB,MAAM,KAAd,aACCiB,EAAM/C,KAAI,SAACqD,EAAMC,GAAP,OACT,4BAAQxB,MAAOwB,EAAQ,EAAGrD,IAAKoD,EAAKnD,IACjCmD,EAAK3C,YCyBH6C,EA/CH,WAAO,IAAD,EAC4BhE,mBAAS,GADrC,mBACTH,EADS,KACOoE,EADP,OAE4BjE,mBAAS,GAFrC,mBAETD,EAFS,KAEOmE,EAFP,KAkBhB,OACE,yBAAKvE,UAAU,OACb,4BAAQA,UAAU,eAChB,kBAAC,EAAD,CACE+D,iBAlBiB,SAACxB,GACxB+B,GAAmB/B,EAAMO,OAAOF,QAkB1B1C,eAAgBA,KAIpB,0BAAMF,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEE,eAAgBA,EAChBC,WAvBS,SAACN,GAOlB0E,EANI1E,IAAWO,EAMGP,EALE,IAsBZO,eAAgBA,KAIpB,yBAAKJ,UAAU,gBACO,IAAnBI,EACG,6CACA,kBAAC,EAAD,CAAaP,OAAQO,QCzCnCoE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.1d2b80d6.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n};\n\nexport const post = (url, data) => request(\n  url,\n  {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  },\n);\n\nexport const remove = url => request(\n  url,\n  {\n    method: 'DELETE',\n  },\n);\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  return (\n    userId\n      ? posts.filter(post => post.userId === userId)\n      : posts\n  );\n};\n\nexport const getPostDetails = async(postId) => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUserId, choosePost, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, toggleLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    try {\n      loadPosts();\n    } catch {\n      setError('Oops... Reload the page');\n    }\n  }, [selectedUserId]);\n\n  const loadPosts = async() => {\n    const postsFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsFromServer);\n    toggleLoading(false);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading\n        ? <Loader />\n        : !!posts && (\n          <ul>\n            {posts.map(post => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>\n                    {`[User #${post.userId}]:`}\n                  </b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => choosePost(post.id)}\n                >\n                  {selectedPostId === post.id\n                    ? 'Close'\n                    : 'Open'\n                  }\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      {!!error && (\n        <div>{error}</div>\n      )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  choosePost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { post, remove, request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const postComment = async(\n  postId,\n  name,\n  email,\n  body,\n) => post('/comments', {\n  postId,\n  name,\n  email,\n  body,\n});\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    try {\n      await postComment(postId, name, email, body);\n      updateComments();\n      setName('');\n      setEmail('');\n      setBody('');\n    } catch {\n      setError('Oops... Smth went wrong');\n    }\n  };\n\n  return error ? (\n    <div>{error}</div>\n  ) : (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/comments';\n\nexport const CommentsList = ({ comments, updateComments }) => {\n  const [error, setError] = useState(null);\n\n  const handleDelete = async(commentId) => {\n    try {\n      await deleteComment(commentId);\n      updateComments();\n    } catch {\n      setError('Oops...Reload the page');\n    }\n  };\n\n  return error ? (\n    <div>{error}</div>\n  ) : (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li className=\"PostDetails__list-item\" key={comment.id}>\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleDelete(comment.id)}\n          >\n            X\n          </button>\n          <p>\n            {comment.body}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport { getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState(null);\n  const [isCommentsShown, toggleCommentsVisibility] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadPostDetails();\n    updateComments();\n  }, [postId]);\n\n  const loadPostDetails = async() => {\n    try {\n      const postDetailsFromServer = await getPostDetails(postId);\n\n      setPostDetails(postDetailsFromServer);\n    } catch {\n      setError('Oops... Reload the page');\n    }\n  };\n\n  const updateComments = async() => {\n    try {\n      const commentsFromserver = await getPostComments(postId);\n\n      setComments(commentsFromserver);\n    } catch {\n      setError('Oops... Reload the page');\n    }\n  };\n\n  return error ? (\n    <div>{error}</div>\n  ) : (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments\n          ? (\n            <>\n              {!!comments.length && (\n                <button\n                  type=\"button\"\n                  className={classNames({\n                    button: true,\n                  })}\n                  onClick={() => toggleCommentsVisibility(!isCommentsShown)}\n                >\n                  {`${isCommentsShown\n                    ? 'Hide'\n                    : 'Show'} ${comments.length} comments`}\n                </button>\n              )}\n\n              {isCommentsShown && (\n                <CommentsList\n                  comments={comments}\n                  updateComments={updateComments}\n                />\n              )}\n            </>\n          )\n          : (<p>Loading comments...</p>)\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} updateComments={updateComments} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async(userId) => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUserId, handleUserSelect }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async() => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer);\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={handleUserSelect}\n      >\n        <option value=\"0\">All users</option>\n        {users.map((user, index) => (\n          <option value={index + 1} key={user.id}>\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  handleUserSelect: PropTypes.func.isRequired,\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleUserSelect = (event) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const choosePost = (postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          handleUserSelect={handleUserSelect}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            choosePost={choosePost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId === 0\n            ? <h4>Choose a post</h4>\n            : <PostDetails postId={selectedPostId} />\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}